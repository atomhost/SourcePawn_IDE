using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace SourcePawn_IDE
{
    /// <summary>
    /// Interaction logic for ScriptGenerator.xaml
    /// </summary>
    public partial class ScriptGenerator : Window
    {
        public string Script = "";

        List<ConVar> convars = new List<ConVar>();
        List<Command> commands = new List<Command>();

        public ScriptGenerator()
        {
            InitializeComponent();
        }

        private void ConVarLB_KeyDown(object sender, KeyEventArgs e)
        {
            if (ConVarLB.SelectedIndex >= 0)
            {
                switch (e.Key)
                {
                    case Key.Back:
                    case Key.Delete:
                        ConVarLB.Items.RemoveAt(ConVarLB.SelectedIndex);
                        break;
                    case Key.C:
                        if (Keyboard.Modifiers.HasFlag(ModifierKeys.Control))
                        {
                            Clipboard.SetText(ConVarLB.SelectedItem.ToString());
                        }
                        break;
                }
            }
        }

        private void BtnOk_Click(object sender, RoutedEventArgs e)
        {
            GenerateScript();
            this.DialogResult = true;
        }

        private void BtnClose_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
        }

        private void GenerateScript()
        {
            StringBuilder str = new StringBuilder();
            StringBuilder OnPluginStart = new StringBuilder();
            StringBuilder Callbacks = new StringBuilder();

            str.AppendLine("/* Script generated by SourcePawn IDE */\n");
            if (semicolon.IsChecked.GetValueOrDefault(false))
            {
                str.AppendLine("#pragma semicolon 1\n");
            }
            str.AppendLine("#include <sourcemod>\n\n#define PLUGIN_VERSION \"1.0.0.0\"\n");

            OnPluginStart.AppendLine("    CreateConVar(\"" + name.Text.Replace(' ', '_') + "_version\", PLUGIN_VERSION, \"Current " + name.Text + " version\", FCVAR_PLUGIN|FCVAR_NOTIFY|FCVAR_DONTRECORD);");

            if (convars.Count != 0)
            {
                OnPluginStart.AppendLine();
                foreach (ConVar cvar in convars)
                {
                    if (!string.IsNullOrWhiteSpace(cvar.Command) && !string.IsNullOrWhiteSpace(cvar.Value))
                    {
                        if (string.IsNullOrWhiteSpace(cvar.Handle))
                        {
                            OnPluginStart.AppendLine("    CreateConVar(\"" + cvar.Command + "\", \"" + cvar.Value + "\", \"" + cvar.Description + "\", FCVAR_PLUGIN, " + cvar.UseMinVal + ", " + cvar.MinVal + ", " + cvar.UseMaxVal + ", " + cvar.MaxVal + ");");
                        }
                        else
                        {
                            str.AppendLine("new Handle:" + cvar.Handle + " = INVALID_HANDLE;");
                            OnPluginStart.AppendLine("    " + cvar.Handle + " = CreateConVar(\"" + cvar.Command + "\", \"" + cvar.Value + "\", \"" + cvar.Description + "\", FCVAR_PLUGIN, " + cvar.UseMinVal + ", " + cvar.MinVal + ", " + cvar.UseMaxVal + ", " + cvar.MaxVal + ");");
                        }
                    }
                }
            }

            if (commands.Count != 0)
            {
                OnPluginStart.AppendLine();
                foreach (Command cmd in commands)
                {
                    if (!string.IsNullOrWhiteSpace(cmd.command) && !string.IsNullOrWhiteSpace(cmd.Callback))
                    {
                        switch (cmd.CommandType)
                        {
                            case CMDTYPE.Console:
                                OnPluginStart.AppendLine("    RegConsoleCmd(\"" + cmd.command + "\", " + cmd.Callback + ", \"" + cmd.Description + "\", FCVAR_PLUGIN);");
                                Callbacks.Append("\n\npublic Action:" + cmd.Callback + "(client, args)\n{\n    return Plugin_Handled;\n}");
                                break;
                            case CMDTYPE.Server:
                                OnPluginStart.AppendLine("    RegServerCmd(\"" + cmd.command + "\", " + cmd.Callback + ", \"" + cmd.Description + "\", FCVAR_PLUGIN);");
                                Callbacks.Append("\n\npublic Action:" + cmd.Callback + "(args)\n{\n    return Plugin_Handled;\n}");
                                break;
                            case CMDTYPE.Admin:
                                OnPluginStart.AppendLine("    RegAdminCmd(\"" + cmd.command + "\", " + cmd.Callback + ", " + cmd.Flags + ", \"" + cmd.Description + "\", \"" + cmd.Group + "\", FCVAR_PLUGIN);");
                                Callbacks.Append("\n\npublic Action:" + cmd.Callback + "(client, args)\n{\n    return Plugin_Handled;\n}");
                                break;
                            case CMDTYPE.CommandListener:
                                OnPluginStart.AppendLine("    AddCommandListener(" + cmd.Callback + ", \"" + cmd.command + "\");");
                                Callbacks.Append("\n\npublic Action:" + cmd.Callback + "(client, const String:command[], argc)\n{\n    return Plugin_Continue;\n}");
                                break;
                        }
                    }
                }
            }

            str.AppendLine("public Plugin:myinfo = \n{\n    name = \"" + name.Text +
                           "\",\n    author = \"" + author.Text +
                           "\",\n    description = \"" + description.Text +
                           "\",\n    version = PLUGIN_VERSION" +
                           ",\n    url = \"" + url.Text + "\"\n}");
            str.AppendLine("\npublic OnPluginStart()\n{");
            str.Append(OnPluginStart.ToString() + "}");
            str.Append(Callbacks.ToString());
            Script = str.ToString();
        }

        private void BtnCVAR_Click(object sender, RoutedEventArgs e)
        {
            ConVarDialog cvd = new ConVarDialog();
            if (cvd.ShowDialog().GetValueOrDefault(false))
            {
                if (!(string.IsNullOrWhiteSpace(cvd.ConVarInfo.Command) || string.IsNullOrWhiteSpace(cvd.ConVarInfo.Value)))
                {
                    convars.Add(cvd.ConVarInfo);
                    ConVarLB.Items.Add(cvd.ConVarInfo.Command);
                }
            }
        }

        private void BtnCMD_Click(object sender, RoutedEventArgs e)
        {
            CommandDesign cd = new CommandDesign();
            if (cd.ShowDialog().GetValueOrDefault(false))
            {
                if (!(string.IsNullOrWhiteSpace(cd.command.command) || string.IsNullOrWhiteSpace(cd.command.Callback)))
                {
                    if (cd.command.CommandType == CMDTYPE.Admin && string.IsNullOrWhiteSpace(cd.command.Flags))
                    {
                        cd.command.Flags = "ADMFLAG_ROOT";
                    }
                    commands.Add(cd.command);
                    CMDLB.Items.Add(cd.command.command);
                }
            }
        }
    }
}
