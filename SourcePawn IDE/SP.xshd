<?xml version="1.0"?>
<SyntaxDefinition name="SourcePawn" extensions=".sp" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
  <!-- The named colors 'Comment' and 'String' are used in SharpDevelop to detect if a line is inside a multiline string/comment -->
  <Color name="Comment" foreground="#008000" exampleText="// comment" />
  <Color name="String" foreground="#A31515" exampleText="string text = &quot;Hello, World!&quot;"/>
  <Color name="Char" foreground="#A31515" exampleText="char linefeed = '\n';"/>
  <Color name="Preprocessor" foreground="#E87400" exampleText="#region Title" />
  <Color name="ValueTypes" foreground="#0080C0" exampleText="bool b = true;" />
  <Color name="NumberLiteral" foreground="Black" exampleText="3.1415f"/>
  <Color name="Keywords" foreground="Blue" exampleText="if (a) {} else {}"/>
  <Color name="Visibility" foreground="Blue" exampleText="public override void ToString();"/>
  <Color name="TrueFalse" foreground="Blue" exampleText="b = false; a = true;" />


  <!-- This is the main ruleset. -->
  <RuleSet>
    <Span color="Preprocessor">
      <Begin>\#</Begin>
      <RuleSet name="PreprocessorSet">
        <Keywords>
          <Word>assert</Word>
          <Word>define</Word>
          <Word>endinput</Word>
          <Word>error</Word>
          <Word>file</Word>
          <Word>if</Word>
          <Word>elseif</Word>
          <Word>else</Word>
          <Word>endif</Word>
          <Word>include</Word>
          <Word>line</Word>
          <Word>pragma</Word>
          <Word>section</Word>
          <Word>tryinclude</Word>
          <Word>undef</Word>
          <Word>pragma</Word>
        </Keywords>
      </RuleSet>
    </Span>

    <Span color="Comment">
      <Begin>//</Begin>
    </Span>

    <Span color="Comment" multiline="true">
      <Begin>/\*</Begin>
      <End>\*/</End>
    </Span>

    <Span color="String">
      <Begin>"</Begin>
      <End>"</End>
      <RuleSet>
        <!-- span for escape sequences -->
        <Span begin="\\" end="."/>
      </RuleSet>
    </Span>

    <Span color="Char">
      <Begin>'</Begin>
      <End>'</End>
      <RuleSet>
        <!-- span for escape sequences -->
        <Span begin="\\" end="."/>
      </RuleSet>
    </Span>

    <Rule>
      @[\w\d_]+
    </Rule>

    <Keywords color="TrueFalse">
      <Word>true</Word>
      <Word>false</Word>
    </Keywords>

    <Keywords color="Keywords">
      <Word>else</Word>
      <Word>if</Word>
      <Word>switch</Word>
      <Word>case</Word>
      <Word>default</Word>
      <Word>do</Word>
      <Word>for</Word>
      <Word>while</Word>
      <Word>break</Word>
      <Word>continue</Word>
      <Word>return</Word>
    </Keywords>
    
    <Keywords color="ValueTypes">
      <Word>bool</Word>
      <Word>Float</Word>
      <Word>String</Word>
    </Keywords>

    <Keywords color="Visibility">
      <Word>public</Word>
      <Word>stock</Word>
      <Word>native</Word>
      <Word>forward</Word>
      <Word>static</Word>
      <Word>decl</Word>
      <Word>new</Word>
      <Word>struct</Word>
      <Word>operator</Word>
      <Word>enum</Word>
      <Word>const</Word>
      <Word>functag</Word>
    </Keywords>

    <!-- Digits -->
    <Rule color="NumberLiteral">
      \b0[xX][0-9a-fA-F]+  # hex number
      |
      (	\b\d+(\.[0-9]+)?   #number with optional floating point
      |	\.[0-9]+           #or just starting with floating point
      )
      ([eE][+-]?[0-9]+)? # optional exponent
    </Rule>
  </RuleSet>
</SyntaxDefinition>
